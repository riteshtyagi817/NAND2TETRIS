// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

            
    // Mux before A
    Mux16(a = instruction, b =AluOut, sel = instruction[15], out = AInput);

    // will be used in ALoad

    Not(in = instruction[15], out = NotOutput);
    
    // also will be used in ALoad 
    Or(a = NotOutput, b = instruction[5], out = ALoad);

    // A register implementation

    ARegister(in = AInput, load = ALoad, out = AInputMux, out[0..14] = addressM);
    
    // MUX16 near to cpu
    
    Mux16(a = AInputMux, b = inM, sel = instruction[12], out = AluInput2);




    //load for D register
    And(a = instruction[15], b = instruction[4] , out = DLoad);

    
    
    // D Register implementation

    DRegister(in =AluOut, load = DLoad, out = AluInput1);
    

    // ALU implementation 
    ALU(x = AluInput1, y = AluInput2, zx = instruction[11] , nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = AluOut,  zr = zr, ng = ng);
    

   // will  be used in implementation of load of pc 

      
    And(a = instruction[1] , b  = zr, out = j2Andzr);

    And(a = instruction[2] , b = ng, out = j1Andng);

    Not(in = zr, out = Notzr);

    Not(in = ng, out = Notng);

    And(a = instruction[0], b  = Notzr, out = j3AndNotzr);

    And(a = j3AndNotzr, b = Notng, out = j3AndNotzrAndNotng);

    And(a = instruction[2], b = instruction[1], out = j1Andj2);
    And(a = instruction[0], b  = j1Andj2, out = j1Andj2Andj3);

    Or(a = j2Andzr, b = j1Andng, out = temp1);
    Or(a = temp1, b = j3AndNotzrAndNotng, out = temp2);
    Or(a = temp2, b = j1Andj2Andj3, out = temp3);
    
    // final load implementation
    And( a = instruction[15], b = temp3, out = Load);
    
    // will be used in inc
    Not(in = Load, out = NotLoad);
     
   // PC implementation
   PC(in = AInputMux, reset = reset, inc = NotLoad, load = Load, out[0..14] = pc);
    
    // writeM implementation
    And(a = instruction[15], b = instruction[3], out = writeM);












}